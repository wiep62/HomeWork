Закрепите полученные знания, выполнив практическую работу. Необходимо выполнить и сдать на проверку все пункты задания.



Цель практической работы
Научиться:

использовать механизм исключений с помощью их создания и «отлова» в коде;
писать конфигурацию для логирования событий при исполнении программы.


Что нужно сделать
Выполните задание в репозитории java_basics в проекте ExceptionsDebuggingAndTesting/homework_1/ConsoleCustomerList.

Проект ConsoleCustomerList — консольное приложение, в котором можно хранить список клиентов. Запустите его, введите в консоль слово help и нажмите Enter. Программа выведет список доступных команд и примеры их выполнения.
Поэкспериментируйте с программой: попробуйте ввести разные значения и команды, которые не будут соответствовать примерам. Добейтесь того, чтобы программа «вылетела», то есть произошёл Exception.
Напишите в классе CustomerStorage проекта ConsoleCustomerList все варианты защиты от некорректных данных, которые вам удастся придумать и обнаружить. Создайте собственные классы исключений, которые должны выбрасываться:
при некорректном количестве компонентов в переданной строке с данными;
при неверном формате номера телефона;
при неправильном формате email.
Защитите программу от преждевременного завершения метода addCustomer() — напишите код, который будет «отлавливать» исключения и выводить эту информацию в консоль в понятном пользователю виде и в лог (см. ниже).
Подключите библиотеку Log4j2 к проекту:
<dependency>
   <groupId>org.apache.logging.log4j</groupId>
   <artifactId>log4j-api</artifactId>
   <version>2.18.0</version>
</dependency>
<dependency>
   <groupId>org.apache.logging.log4j</groupId>
   <artifactId>log4j-core</artifactId>
   <version>2.18.0</version>
</dependency>
Пример использования библиотеки:

import org.apache.logging.log4j.*;
public class Main {
   private static final Logger logger =
       LogManager.getLogger(Main.class);
   public static void main(String[] args) {
       logger.log(Level.WARN, "Сообщение об ошибке");
   }
}
Сделайте два отдельных лога в папке logs проекта с помощью Log4j2 и настройте конфигурацию библиотеки Log4j следующим образом:
logs/queries.log — заполняется информацией обо всех запросах к приложению;
logs/errors.log — заполняется информацией обо всех ошибках (возникших исключениях со всеми деталями).
Подробнее о том, как настраивать конфигурацию, читайте в материале.



Критерии оценки
Принято:

Метод реализован.
Код метода чистый.
Тесты выполняются успешно.
Логи пишутся корректно.
В каждый лог-файл выводится только соответствующий тип информации.








ackage practice;
import java.util.ArrayList;

import java.util.Scanner;
import java.util.Set;

public class Main {
    public static void main(String[] args) {


PhoneBook book  = new PhoneBook();

       // Scanner input = new Scanner(System.in);
/*while (true){
    System.out.println("Введите номер: ");
    String phone = input.nextLine();
    System.out.println("Введите имя: ");
    String name = input.nextLine();
    book.addContact(phone,name);

    System.out.println("Поиск контакта: ");
    String name1 = input.nextLine();
    System.out.println( book.getContactByPhone(name1));

    if (input.equals("LIST")) {
        for (String contacts : book.getAllContacts()) {
            System.out.println(contacts);
            }
        continue;
    }
    }*/
        String name;
        String phone;
        while (true) {
            System.out.println("Введите номер, имя или команду:");
            String input = new Scanner(System.in).nextLine();
            Boolean haveName = false;
            Boolean havePhone = false;
        /**
         *  инициализируем значением false две переменные типа Boolean,
         *  которые будут отражать есть ли уже такой контакт или такое имя в
         *  нашей телефонной книге:
        * Boolean haveName = false;
         * Boolean havePhone = false;
         * и будем проверять данную информацию на каждой итерации цикла,
         * сверяя введенные нами значение (input) с телефонной книгой phoneBookMap,
         * которую заполняем
         * */
for (String keys : book.map.keySet()){
    if (input.equals(keys)){
        havePhone = true;
    }
}
for (String keys : book.map.keySet()){
    if (input.equals(book.map.get(keys))){
        haveName = true;
    }
}

/**
 * Введено имя
 *
 * ✏ Мы уже реализовали методы по проверки на имя или номер телефона, в классе PhoneBook,
 * воспользуемся этими методом: book.isName(input)
 *
 * ✏ Далее проверим, есть ли уже это имя в телефонной книге, для такой проверки мы создали
 * переменную haveName, и есть ли есть вызываем метод реализованный в классе PhoneBook метод
 * .getContactByName(), выводим требуемую информацию в консоль и прерываем итерацию цикла while
 *
 * ✏ Если такого имени нет, предложим ввести для нового контакта номер телефона, проверим этот
 * телефон реализованным в классе PhoneBook методом .isPhone(), если все в порядке запишем новый
 * контакт в наш Map PhoneBookMap используя реализованный метод класса PhoneBook .addContact()
 * и прерываем итерацию цикла while
 * */
if (book.isNameBoolean(input)){
    name = input;
    if (haveName){
        System.out.println(book.getContactByName(name));
        continue;
    }else {
        System.out.println("Такого имени в телефонной книге нет.\n" +
               "Введите номер телефона для абонента " + "\"" + name + "\":");
      String phoneInput = new Scanner(System.in).nextLine();
       if (book.isPhoneBoolean(phoneInput)) {
            book.addContact(phoneInput, name);
            System.out.println("Контакт сохранен!");
            continue;
    }
}
        }

            if (book.isPhoneBoolean(input)){
                phone = input;
                if (havePhone){
                    System.out.println(book.getContactByPhone(phone));
                    continue;
                }else {
                    System.out.println("Такого номера в телефонной книге нет.\n" +
                            "Введите имя абонента для номера " + "\"" + phone + "\":");
                    String nameInput = new Scanner(System.in).nextLine();
                    book.addContact(phone, nameInput);

                    System.out.println("Контакт сохранен!");
                        continue;

                }
            }

            if (input.equals("LIST")) {
                for (String contacts : book.getAllContacts()) {
                    System.out.println(contacts);
                    }
                continue;
            }

            }
        }}


